# -*- coding: utf-8 -*-

# Define self package variable
__version__ = '1.0a1'
__all__ = ["pycoQC", "pycoQC_fun"]
__author__= 'Adrien Leger'
__email__ = 'aleg@ebi.ac.uk'
__url__ = "https://github.com/a-slide/pycoQC"
__licence__ = 'GPLv3'
__classifiers__ = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Science/Research',
    'Topic :: Scientific/Engineering :: Bio-Informatics',
    'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.3',
    'Programming Language :: Python :: 3.4',
    'Programming Language :: Python :: 3.5',
    'Programming Language :: Python :: 3.6',]
__install_requires__ = ['numpy>=1.13.0', 'pandas>=0.20.0', 'matplotlib>=2.0.0', 'seaborn>= 0.7.0', 'notebook>=4.0.0']
__package_data__ =  ['data/sequencing_summary.txt', 'data/sequencing_1dsq_summary.txt', "test_pycoQC.ipynb"]
__python_requires__='>=3'

__description__="""PycoQC is a Python 3 package for Jupyter Notebook, computing metrics and generating simple QC plots
from the sequencing summary report generated by Oxford Nanopore technologies Albacore basecaller"""
__long_description__="""pycoQC is a very simple quality control package for Nanopore data written in pure python3, meant
to be used directly in a jupyter notebook 4.0.0 +. As opposed to current and more exhaustive QC programs for nanopore
data, pycoQC is very fast as it relies entirely on the *sequencing_summary.txt* file generated by ONT Albacore
Sequencing Pipeline Software 1.2.1+, during base calling. Consequently, pycoQC will only provide metrics at read level
metrics (and not at base level). The package supports 1D and 1D2/2D runs analysed with Albacore.

At the time of the package writing, Albacore 2.0.1 generates a tabulated file with the following fields (the fields in
bold are used by pycoQC):

* 1D run => filename, **read_id**, **run_id**, **channel**, **start_time**, duration, **num_events**, template_start,
num_events_template, template_duration, num_called_template, **sequence_length_template**, **mean_qscore_template**,
strand_score_template.

* 1D2 run => filename1, filename2, read_id1, read_id2, **read_id**, **run_id**, **channel**, **start_time**,
**sequence_length_2d**, **mean_qscore_2d**

Please be aware that pycoQC is an experimental package that is still under development. It was tested under
Linux Ubuntu 16.04 and in an HPC environment running under Red Hat Enterprise 7.1.
You are welcome to raise issues, contribute to the development and submit patches or updates."""

# Collect info in a dictionnary for setup.py
setup_dict = {
    "name": __name__,
    "version": __version__,
    "description": __description__,
    "long_description": __long_description__,
    "url": __url__,
    "author": __author__,
    "author_email": __email__,
    "license": __licence__,
    "classifiers": __classifiers__,
    "install_requires": __install_requires__,
    "packages": [__name__],
    "package_dir": {__name__: __name__},
    "package_data": {__name__: __package_data__},
    }
